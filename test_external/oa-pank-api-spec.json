
{
 "openapi": "3.0.0",
 "info": {
   "title": "OA-Pank API",
   "version": "1.0.0",
   "description": "API documentation for OA-Pank banking system"
 },
 "servers": [
   {
     "url": "https://hack2you.eu/oa-pank",
     "description": "Production server (current)"
   },
   {
     "url": "/",
     "description": "Current server"
   }
 ],
 "security": [],
 "components": {
   "securitySchemes": {
     "bearerAuth": {
       "type": "http",
       "scheme": "bearer",
       "bearerFormat": "JWT"
     }
   },
   "schemas": {
     "Error": {
       "type": "object",
       "properties": {
         "success": {
           "type": "boolean",
           "example": false
         },
         "message": {
           "type": "string",
           "example": "Error message"
         },
         "error": {
           "type": "string",
           "example": "error_code"
         },
         "details": {
           "type": "string",
           "example": "Detailed error information"
         }
       }
     },
     "ValidationError": {
       "type": "object",
       "properties": {
         "success": {
           "type": "boolean",
           "example": false
         },
         "message": {
           "type": "string",
           "example": "Validation failed"
         },
         "errors": {
           "type": "array",
           "items": {
             "type": "object",
             "properties": {
               "field": {
                 "type": "string",
                 "example": "username"
               },
               "message": {
                 "type": "string",
                 "example": "Username is required"
               },
               "value": {
                 "type": "string",
                 "example": ""
               }
             }
           }
         }
       }
     },
     "AuthenticationError": {
       "type": "object",
       "properties": {
         "success": {
           "type": "boolean",
           "example": false
         },
         "message": {
           "type": "string",
           "example": "User not found"
         },
         "error": {
           "type": "string",
           "example": "user_not_found"
         }
       }
     },
     "InsufficientFundsError": {
       "type": "object",
       "properties": {
         "success": {
           "type": "boolean",
           "example": false
         },
         "message": {
           "type": "string",
           "example": "Insufficient funds"
         },
         "error": {
           "type": "string",
           "example": "insufficient_funds"
         },
         "available": {
           "type": "number",
           "example": 100.5
         },
         "availableCurrency": {
           "type": "string",
           "example": "EUR"
         },
         "required": {
           "type": "number",
           "example": 200
         },
         "requiredCurrency": {
           "type": "string",
           "example": "EUR"
         },
         "accountNumber": {
           "type": "string",
           "example": "OAP12345678"
         }
       }
     },
     "User": {
       "type": "object",
       "properties": {
         "_id": {
           "type": "string",
           "example": "60d21b4667d0d8992e610c85"
         },
         "username": {
           "type": "string",
           "example": "johndoe"
         },
         "firstName": {
           "type": "string",
           "example": "John"
         },
         "lastName": {
           "type": "string",
           "example": "Doe"
         },
         "email": {
           "type": "string",
           "example": "john.doe@example.com"
         },
         "role": {
           "type": "string",
           "enum": [
             "user",
             "admin"
           ],
           "example": "user"
         },
         "isActive": {
           "type": "boolean",
           "example": true
         },
         "lastLogin": {
           "type": "string",
           "format": "date-time",
           "nullable": true
         },
         "createdAt": {
           "type": "string",
           "format": "date-time"
         },
         "updatedAt": {
           "type": "string",
           "format": "date-time"
         }
       }
     },
     "UserInput": {
       "type": "object",
       "required": [
         "username",
         "password",
         "firstName",
         "lastName",
         "email"
       ],
       "properties": {
         "username": {
           "type": "string",
           "minLength": 3,
           "maxLength": 30,
           "example": "johndoe"
         },
         "password": {
           "type": "string",
           "minLength": 6,
           "example": "password123"
         },
         "firstName": {
           "type": "string",
           "example": "John"
         },
         "lastName": {
           "type": "string",
           "example": "Doe"
         },
         "email": {
           "type": "string",
           "format": "email",
           "example": "john.doe@example.com"
         }
       }
     },
     "LoginInput": {
       "type": "object",
       "required": [
         "username",
         "password"
       ],
       "properties": {
         "username": {
           "type": "string",
           "example": "johndoe"
         },
         "password": {
           "type": "string",
           "example": "password123"
         }
       }
     },
     "LoginResponse": {
       "type": "object",
       "properties": {
         "success": {
           "type": "boolean",
           "example": true
         },
         "user": {
           "$ref": "#/components/schemas/User"
         },
         "token": {
           "type": "string",
           "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiIxMjMiLCJpZCI6IjEyMyIsInVzZXJuYW1lIjoiam9obmRvZSIsImlhdCI6MTYxNjAwMDAwMCwiZXhwIjoxNjE2MDg2NDAwfQ.X_x-8wnfLq9_Pn6D9V8D6LMTRGQHJlGV1_1-QQ"
         }
       }
     },
     "Account": {
       "type": "object",
       "properties": {
         "_id": {
           "type": "string",
           "example": "60d21b4667d0d8992e610c85"
         },
         "accountNumber": {
           "type": "string",
           "example": "OAP12345678"
         },
         "user": {
           "type": "string",
           "example": "60d21b4667d0d8992e610c85"
         },
         "balance": {
           "type": "number",
           "format": "float",
           "example": 1000
         },
         "currency": {
           "type": "string",
           "enum": [
             "EUR",
             "USD",
             "GBP",
             "CHF",
             "JPY",
             "AUD",
             "CAD",
             "SEK",
             "NOK",
             "DKK",
             "PLN",
             "CZK"
           ],
           "example": "EUR"
         },
         "isActive": {
           "type": "boolean",
           "example": true
         },
         "type": {
           "type": "string",
           "enum": [
             "checking",
             "savings",
             "investment"
           ],
           "example": "checking"
         },
         "createdAt": {
           "type": "string",
           "format": "date-time"
         },
         "updatedAt": {
           "type": "string",
           "format": "date-time"
         }
       }
     },
     "AccountInput": {
       "type": "object",
       "required": [
         "currency",
         "type"
       ],
       "properties": {
         "currency": {
           "type": "string",
           "enum": [
             "EUR",
             "USD",
             "GBP",
             "CHF",
             "JPY",
             "AUD",
             "CAD",
             "SEK",
             "NOK",
             "DKK",
             "PLN",
             "CZK"
           ],
           "example": "EUR"
         },
         "type": {
           "type": "string",
           "enum": [
             "checking",
             "savings",
             "investment"
           ],
           "example": "checking"
         }
       }
     },
     "Transaction": {
       "type": "object",
       "properties": {
         "_id": {
           "type": "string",
           "example": "60d21b4667d0d8992e610c85"
         },
         "transactionId": {
           "type": "string",
           "example": "OAP-1620000000000-12345"
         },
         "accountFrom": {
           "type": "string",
           "example": 31359474302
         },
         "accountTo": {
           "type": "string",
           "example": 31300000000
         },
         "amount": {
           "type": "number",
           "format": "float",
           "example": 100
         },
         "currency": {
           "type": "string",
           "enum": [
             "EUR",
             "USD",
             "GBP",
             "CHF",
             "JPY",
             "AUD",
             "CAD",
             "SEK",
             "NOK",
             "DKK",
             "PLN",
             "CZK"
           ],
           "example": "EUR"
         },
         "status": {
           "type": "string",
           "enum": [
             "pending",
             "inProgress",
             "completed",
             "failed"
           ],
           "example": "completed"
         },
         "type": {
           "type": "string",
           "enum": [
             "internal",
             "external"
           ],
           "example": "internal"
         },
         "description": {
           "type": "string",
           "example": "Payment for services"
         },
         "errorMessage": {
           "type": "string",
           "nullable": true
         },
         "initiatedBy": {
           "type": "string",
           "example": "60d21b4667d0d8992e610c85"
         },
         "signature": {
           "type": "string",
           "nullable": true
         },
         "senderBank": {
           "type": "string",
           "nullable": true
         },
         "receiverBank": {
           "type": "string",
           "nullable": true
         },
         "createdAt": {
           "type": "string",
           "format": "date-time"
         },
         "updatedAt": {
           "type": "string",
           "format": "date-time"
         }
       }
     },
     "TransactionInput": {
       "type": "object",
       "required": [
         "accountFrom",
         "accountTo",
         "amount",
         "currency"
       ],
       "properties": {
         "accountFrom": {
           "type": "string",
           "example": 31359474302
         },
         "accountTo": {
           "type": "string",
           "example": 31300000000
         },
         "amount": {
           "type": "number",
           "format": "float",
           "minimum": 0.01,
           "example": 100
         },
         "currency": {
           "type": "string",
           "enum": [
             "EUR",
             "USD",
             "GBP",
             "CHF",
             "JPY",
             "AUD",
             "CAD",
             "SEK",
             "NOK",
             "DKK",
             "PLN",
             "CZK"
           ],
           "example": "EUR"
         },
         "description": {
           "type": "string",
           "example": "Payment for services"
         }
       }
     },
     "JWKSResponse": {
       "type": "object",
       "properties": {
         "keys": {
           "type": "array",
           "items": {
             "type": "object",
             "properties": {
               "kty": {
                 "type": "string",
                 "example": "RSA"
               },
               "use": {
                 "type": "string",
                 "example": "sig"
               },
               "kid": {
                 "type": "string",
                 "example": 1
               },
               "n": {
                 "type": "string"
               },
               "e": {
                 "type": "string",
                 "example": "AQAB"
               }
             }
           }
         }
       }
     }
   }
 },
 "paths": {
   "/users": {
     "post": {
       "security": [],
       "tags": [
         "Authentication"
       ],
       "summary": "Register a new user",
       "description": "Creates a new user account",
       "requestBody": {
         "required": true,
         "content": {
           "application/json": {
             "schema": {
               "$ref": "#/components/schemas/UserInput"
             }
           }
         }
       },
       "responses": {
         "201": {
           "description": "User created successfully",
           "content": {
             "application/json": {
               "schema": {
                 "type": "object",
                 "properties": {
                   "success": {
                     "type": "boolean",
                     "example": true
                   },
                   "user": {
                     "$ref": "#/components/schemas/User"
                   }
                 }
               }
             }
           }
         },
         "400": {
           "description": "Bad request",
           "content": {
             "application/json": {
               "schema": {
                 "$ref": "#/components/schemas/ValidationError"
               }
             }
           }
         },
         "401": {
           "description": "Unauthorized",
           "content": {
             "application/json": {
               "schema": {
                 "$ref": "#/components/schemas/Error"
               }
             }
           }
         }
       }
     }
   },
   "/sessions": {
     "post": {
       "security": [],
       "tags": [
         "Authentication"
       ],
       "summary": "Login user",
       "description": "Authenticates a user and creates a session",
       "requestBody": {
         "required": true,
         "content": {
           "application/json": {
             "schema": {
               "$ref": "#/components/schemas/LoginInput"
             }
           }
         }
       },
       "responses": {
         "200": {
           "description": "Login successful",
           "content": {
             "application/json": {
               "schema": {
                 "$ref": "#/components/schemas/LoginResponse"
               }
             }
           }
         },
         "400": {
           "description": "Bad request - Missing or invalid fields",
           "content": {
             "application/json": {
               "schema": {
                 "$ref": "#/components/schemas/ValidationError"
               }
             }
           }
         },
         "401": {
           "description": "Unauthorized - User not found or incorrect password",
           "content": {
             "application/json": {
               "schema": {
                 "$ref": "#/components/schemas/AuthenticationError"
               }
             }
           }
         }
       }
     }
   },
   "/sessions/current": {
     "delete": {
       "tags": [
         "Authentication"
       ],
       "summary": "Logout user",
       "description": "Invalidates the user's current session",
       "security": [
         {
           "bearerAuth": []
         }
       ],
       "responses": {
         "200": {
           "description": "Logout successful",
           "content": {
             "application/json": {
               "schema": {
                 "type": "object",
                 "properties": {
                   "success": {
                     "type": "boolean",
                     "example": true
                   },
                   "message": {
                     "type": "string",
                     "example": "Logged out successfully"
                   }
                 }
               }
             }
           }
         },
         "401": {
           "description": "Unauthorized",
           "content": {
             "application/json": {
               "schema": {
                 "$ref": "#/components/schemas/Error"
               }
             }
           }
         }
       }
     }
   },
   "/sessions/current/refresh": {
     "post": {
       "tags": [
         "Authentication"
       ],
       "summary": "Refresh session",
       "description": "Extends the current session without requiring re-authentication",
       "security": [
         {
           "bearerAuth": []
         }
       ],
       "responses": {
         "200": {
           "description": "Session refreshed successfully",
           "content": {
             "application/json": {
               "schema": {
                 "type": "object",
                 "properties": {
                   "success": {
                     "type": "boolean",
                     "example": true
                   },
                   "message": {
                     "type": "string",
                     "example": "Session refreshed successfully"
                   },
                   "expiresAt": {
                     "type": "string",
                     "format": "date-time",
                     "example": "2025-03-17T20:26:40.000Z"
                   }
                 }
               }
             }
           }
         },
         "401": {
           "description": "Unauthorized",
           "content": {
             "application/json": {
               "schema": {
                 "$ref": "#/components/schemas/Error"
               }
             }
           }
         }
       }
     }
   },
   "/.well-known/jwks.json": {
     "get": {
       "tags": [
         "JWKS"
       ],
       "summary": "Get JSON Web Key Set",
       "description": "Returns the JSON Web Key Set used for verifying JWT tokens",
       "responses": {
         "200": {
           "description": "JWKS retrieved successfully",
           "content": {
             "application/json": {
               "schema": {
                 "$ref": "#/components/schemas/JWKSResponse"
               }
             }
           }
         },
         "500": {
           "description": "Internal server error",
           "content": {
             "application/json": {
               "schema": {
                 "$ref": "#/components/schemas/Error"
               }
             }
           }
         }
       }
     }
   },
   "/users/me": {
     "get": {
       "tags": [
         "Users"
       ],
       "summary": "Get current user profile",
       "description": "Returns the currently authenticated user's information",
       "security": [
         {
           "bearerAuth": []
         }
       ],
       "responses": {
         "200": {
           "description": "User information retrieved successfully",
           "content": {
             "application/json": {
               "schema": {
                 "type": "object",
                 "properties": {
                   "success": {
                     "type": "boolean",
                     "example": true
                   },
                   "user": {
                     "$ref": "#/components/schemas/User"
                   }
                 }
               }
             }
           }
         },
         "401": {
           "description": "Unauthorized",
           "content": {
             "application/json": {
               "schema": {
                 "$ref": "#/components/schemas/Error"
               }
             }
           }
         }
       }
     }
   },
   "/users/{id}": {
     "get": {
       "tags": [
         "Users"
       ],
       "summary": "Get user by ID",
       "description": "Returns a specific user's information",
       "security": [
         {
           "bearerAuth": []
         }
       ],
       "parameters": [
         {
           "name": "id",
           "in": "path",
           "required": true,
           "schema": {
             "type": "string"
           },
           "description": "User ID"
         }
       ],
       "responses": {
         "200": {
           "description": "User information retrieved successfully",
           "content": {
             "application/json": {
               "schema": {
                 "type": "object",
                 "properties": {
                   "success": {
                     "type": "boolean",
                     "example": true
                   },
                   "user": {
                     "$ref": "#/components/schemas/User"
                   }
                 }
               }
             }
           }
         },
         "401": {
           "description": "Unauthorized",
           "content": {
             "application/json": {
               "schema": {
                 "$ref": "#/components/schemas/Error"
               }
             }
           }
         },
         "403": {
           "description": "Forbidden - No permission to access this user",
           "content": {
             "application/json": {
               "schema": {
                 "$ref": "#/components/schemas/Error"
               }
             }
           }
         },
         "404": {
           "description": "Not found - User not found",
           "content": {
             "application/json": {
               "schema": {
                 "$ref": "#/components/schemas/Error"
               }
             }
           }
         }
       }
     },
     "put": {
       "tags": [
         "Users"
       ],
       "summary": "Update user",
       "description": "Updates a user's information",
       "security": [
         {
           "bearerAuth": []
         }
       ],
       "parameters": [
         {
           "name": "id",
           "in": "path",
           "required": true,
           "schema": {
             "type": "string"
           },
           "description": "User ID"
         }
       ],
       "requestBody": {
         "required": true,
         "content": {
           "application/json": {
             "schema": {
               "type": "object",
               "properties": {
                 "firstName": {
                   "type": "string",
                   "example": "John"
                 },
                 "lastName": {
                   "type": "string",
                   "example": "Doe"
                 },
                 "email": {
                   "type": "string",
                   "format": "email",
                   "example": "john.doe@example.com"
                 }
               }
             }
           }
         }
       },
       "responses": {
         "200": {
           "description": "User updated successfully",
           "content": {
             "application/json": {
               "schema": {
                 "type": "object",
                 "properties": {
                   "success": {
                     "type": "boolean",
                     "example": true
                   },
                   "user": {
                     "$ref": "#/components/schemas/User"
                   }
                 }
               }
             }
           }
         },
         "400": {
           "description": "Bad request - Missing or invalid fields",
           "content": {
             "application/json": {
               "schema": {
                 "$ref": "#/components/schemas/ValidationError"
               }
             }
           }
         },
         "401": {
           "description": "Unauthorized",
           "content": {
             "application/json": {
               "schema": {
                 "$ref": "#/components/schemas/Error"
               }
             }
           }
         },
         "403": {
           "description": "Forbidden - No permission to update this user",
           "content": {
             "application/json": {
               "schema": {
                 "$ref": "#/components/schemas/Error"
               }
             }
           }
         },
         "404": {
           "description": "Not found - User not found",
           "content": {
             "application/json": {
               "schema": {
                 "$ref": "#/components/schemas/Error"
               }
             }
           }
         }
       }
     },
     "delete": {
       "tags": [
         "Users"
       ],
       "summary": "Delete user",
       "description": "Deletes a user account",
       "security": [
         {
           "bearerAuth": []
         }
       ],
       "parameters": [
         {
           "name": "id",
           "in": "path",
           "required": true,
           "schema": {
             "type": "string"
           },
           "description": "User ID"
         }
       ],
       "responses": {
         "200": {
           "description": "User deleted successfully",
           "content": {
             "application/json": {
               "schema": {
                 "type": "object",
                 "properties": {
                   "success": {
                     "type": "boolean",
                     "example": true
                   },
                   "message": {
                     "type": "string",
                     "example": "User deleted successfully"
                   }
                 }
               }
             }
           }
         },
         "401": {
           "description": "Unauthorized",
           "content": {
             "application/json": {
               "schema": {
                 "$ref": "#/components/schemas/Error"
               }
             }
           }
         },
         "403": {
           "description": "Forbidden - No permission to delete this user",
           "content": {
             "application/json": {
               "schema": {
                 "$ref": "#/components/schemas/Error"
               }
             }
           }
         },
         "404": {
           "description": "Not found - User not found",
           "content": {
             "application/json": {
               "schema": {
                 "$ref": "#/components/schemas/Error"
               }
             }
           }
         }
       }
     }
   },
   "/users/{id}/password": {
     "put": {
       "tags": [
         "Users"
       ],
       "summary": "Change password",
       "description": "Changes a user's password",
       "security": [
         {
           "bearerAuth": []
         }
       ],
       "parameters": [
         {
           "name": "id",
           "in": "path",
           "required": true,
           "schema": {
             "type": "string"
           },
           "description": "User ID"
         }
       ],
       "requestBody": {
         "required": true,
         "content": {
           "application/json": {
             "schema": {
               "type": "object",
               "required": [
                 "currentPassword",
                 "newPassword"
               ],
               "properties": {
                 "currentPassword": {
                   "type": "string",
                   "example": "password123"
                 },
                 "newPassword": {
                   "type": "string",
                   "example": "newpassword123"
                 }
               }
             }
           }
         }
       },
       "responses": {
         "200": {
           "description": "Password changed successfully",
           "content": {
             "application/json": {
               "schema": {
                 "type": "object",
                 "properties": {
                   "success": {
                     "type": "boolean",
                     "example": true
                   },
                   "message": {
                     "type": "string",
                     "example": "Password changed successfully"
                   }
                 }
               }
             }
           }
         },
         "400": {
           "description": "Bad request - Missing or invalid fields",
           "content": {
             "application/json": {
               "schema": {
                 "$ref": "#/components/schemas/ValidationError"
               }
             }
           }
         },
         "401": {
           "description": "Unauthorized",
           "content": {
             "application/json": {
               "schema": {
                 "$ref": "#/components/schemas/Error"
               }
             }
           }
         },
         "403": {
           "description": "Forbidden - No permission to change this user's password",
           "content": {
             "application/json": {
               "schema": {
                 "$ref": "#/components/schemas/Error"
               }
             }
           }
         },
         "404": {
           "description": "Not found - User not found",
           "content": {
             "application/json": {
               "schema": {
                 "$ref": "#/components/schemas/Error"
               }
             }
           }
         }
       }
     }
   },
   "/accounts": {
     "get": {
       "tags": [
         "Accounts"
       ],
       "summary": "Get all accounts",
       "description": "Returns all accounts for the authenticated user",
       "security": [
         {
           "bearerAuth": []
         }
       ],
       "responses": {
         "200": {
           "description": "Accounts retrieved successfully",
           "content": {
             "application/json": {
               "schema": {
                 "type": "object",
                 "properties": {
                   "success": {
                     "type": "boolean",
                     "example": true
                   },
                   "accounts": {
                     "type": "array",
                     "items": {
                       "$ref": "#/components/schemas/Account"
                     }
                   }
                 }
               }
             }
           }
         },
         "401": {
           "description": "Unauthorized",
           "content": {
             "application/json": {
               "schema": {
                 "$ref": "#/components/schemas/Error"
               }
             }
           }
         }
       }
     },
     "post": {
       "tags": [
         "Accounts"
       ],
       "summary": "Create account",
       "description": "Creates a new account for the authenticated user",
       "security": [
         {
           "bearerAuth": []
         }
       ],
       "requestBody": {
         "required": true,
         "content": {
           "application/json": {
             "schema": {
               "$ref": "#/components/schemas/AccountInput"
             }
           }
         }
       },
       "responses": {
         "201": {
           "description": "Account created successfully",
           "content": {
             "application/json": {
               "schema": {
                 "type": "object",
                 "properties": {
                   "success": {
                     "type": "boolean",
                     "example": true
                   },
                   "account": {
                     "$ref": "#/components/schemas/Account"
                   }
                 }
               }
             }
           }
         },
         "400": {
           "description": "Bad request - Missing or invalid fields",
           "content": {
             "application/json": {
               "schema": {
                 "$ref": "#/components/schemas/ValidationError"
               }
             }
           }
         },
         "401": {
           "description": "Unauthorized",
           "content": {
             "application/json": {
               "schema": {
                 "$ref": "#/components/schemas/Error"
               }
             }
           }
         }
       }
     }
   },
   "/accounts/{id}": {
     "get": {
       "tags": [
         "Accounts"
       ],
       "summary": "Get account by ID",
       "description": "Returns a specific account's information",
       "security": [
         {
           "bearerAuth": []
         }
       ],
       "parameters": [
         {
           "name": "id",
           "in": "path",
           "required": true,
           "schema": {
             "type": "string"
           },
           "description": "Account ID"
         }
       ],
       "responses": {
         "200": {
           "description": "Account information retrieved successfully",
           "content": {
             "application/json": {
               "schema": {
                 "type": "object",
                 "properties": {
                   "success": {
                     "type": "boolean",
                     "example": true
                   },
                   "account": {
                     "$ref": "#/components/schemas/Account"
                   }
                 }
               }
             }
           }
         },
         "401": {
           "description": "Unauthorized",
           "content": {
             "application/json": {
               "schema": {
                 "$ref": "#/components/schemas/Error"
               }
             }
           }
         },
         "403": {
           "description": "Forbidden - No permission to access this account",
           "content": {
             "application/json": {
               "schema": {
                 "$ref": "#/components/schemas/Error"
               }
             }
           }
         },
         "404": {
           "description": "Not found - Account not found",
           "content": {
             "application/json": {
               "schema": {
                 "$ref": "#/components/schemas/Error"
               }
             }
           }
         }
       }
     },
     "delete": {
       "tags": [
         "Accounts"
       ],
       "summary": "Delete account",
       "description": "Deletes an account",
       "security": [
         {
           "bearerAuth": []
         }
       ],
       "parameters": [
         {
           "name": "id",
           "in": "path",
           "required": true,
           "schema": {
             "type": "string"
           },
           "description": "Account ID"
         }
       ],
       "responses": {
         "200": {
           "description": "Account deleted successfully",
           "content": {
             "application/json": {
               "schema": {
                 "type": "object",
                 "properties": {
                   "success": {
                     "type": "boolean",
                     "example": true
                   },
                   "message": {
                     "type": "string",
                     "example": "Account deleted successfully"
                   }
                 }
               }
             }
           }
         },
         "400": {
           "description": "Bad request - Account has non-zero balance",
           "content": {
             "application/json": {
               "schema": {
                 "$ref": "#/components/schemas/Error"
               }
             }
           }
         },
         "401": {
           "description": "Unauthorized",
           "content": {
             "application/json": {
               "schema": {
                 "$ref": "#/components/schemas/Error"
               }
             }
           }
         },
         "403": {
           "description": "Forbidden - No permission to delete this account",
           "content": {
             "application/json": {
               "schema": {
                 "$ref": "#/components/schemas/Error"
               }
             }
           }
         },
         "404": {
           "description": "Not found - Account not found",
           "content": {
             "application/json": {
               "schema": {
                 "$ref": "#/components/schemas/Error"
               }
             }
           }
         }
       }
     }
   },
   "/transactions": {
     "get": {
       "tags": [
         "Transactions"
       ],
       "summary": "Get all transactions",
       "description": "Returns all transactions for the authenticated user",
       "security": [
         {
           "bearerAuth": []
         }
       ],
       "parameters": [
         {
           "name": "accountId",
           "in": "query",
           "required": false,
           "schema": {
             "type": "string"
           },
           "description": "Filter by account ID"
         },
         {
           "name": "status",
           "in": "query",
           "required": false,
           "schema": {
             "type": "string",
             "enum": [
               "pending",
               "inProgress",
               "completed",
               "failed"
             ]
           },
           "description": "Filter by transaction status"
         },
         {
           "name": "type",
           "in": "query",
           "required": false,
           "schema": {
             "type": "string",
             "enum": [
               "internal",
               "external"
             ]
           },
           "description": "Filter by transaction type"
         },
         {
           "name": "startDate",
           "in": "query",
           "required": false,
           "schema": {
             "type": "string",
             "format": "date"
           },
           "description": "Filter by start date (YYYY-MM-DD)"
         },
         {
           "name": "endDate",
           "in": "query",
           "required": false,
           "schema": {
             "type": "string",
             "format": "date"
           },
           "description": "Filter by end date (YYYY-MM-DD)"
         }
       ],
       "responses": {
         "200": {
           "description": "Transactions retrieved successfully",
           "content": {
             "application/json": {
               "schema": {
                 "type": "object",
                 "properties": {
                   "success": {
                     "type": "boolean",
                     "example": true
                   },
                   "transactions": {
                     "type": "array",
                     "items": {
                       "$ref": "#/components/schemas/Transaction"
                     }
                   }
                 }
               }
             }
           }
         },
         "401": {
           "description": "Unauthorized",
           "content": {
             "application/json": {
               "schema": {
                 "$ref": "#/components/schemas/Error"
               }
             }
           }
         }
       }
     },
     "post": {
       "tags": [
         "Transactions"
       ],
       "summary": "Create transaction",
       "description": "Creates a new transaction",
       "security": [
         {
           "bearerAuth": []
         }
       ],
       "requestBody": {
         "required": true,
         "content": {
           "application/json": {
             "schema": {
               "$ref": "#/components/schemas/TransactionInput"
             }
           }
         }
       },
       "responses": {
         "201": {
           "description": "Transaction initiated successfully",
           "content": {
             "application/json": {
               "schema": {
                 "type": "object",
                 "properties": {
                   "success": {
                     "type": "boolean",
                     "example": true
                   },
                   "transaction": {
                     "$ref": "#/components/schemas/Transaction"
                   }
                 }
               }
             }
           }
         },
         "400": {
           "description": "Bad request - Missing or invalid fields",
           "content": {
             "application/json": {
               "schema": {
                 "$ref": "#/components/schemas/ValidationError"
               }
             }
           }
         },
         "401": {
           "description": "Unauthorized",
           "content": {
             "application/json": {
               "schema": {
                 "$ref": "#/components/schemas/Error"
               }
             }
           }
         },
         "403": {
           "description": "Forbidden - No permission to access the account",
           "content": {
             "application/json": {
               "schema": {
                 "$ref": "#/components/schemas/Error"
               }
             }
           }
         },
         "404": {
           "description": "Not found - Account not found",
           "content": {
             "application/json": {
               "schema": {
                 "$ref": "#/components/schemas/Error"
               }
             }
           }
         },
         "422": {
           "description": "Unprocessable Entity - Insufficient funds or other business logic error",
           "content": {
             "application/json": {
               "schema": {
                 "$ref": "#/components/schemas/InsufficientFundsError"
               }
             }
           }
         },
         "500": {
           "description": "Server error",
           "content": {
             "application/json": {
               "schema": {
                 "$ref": "#/components/schemas/Error"
               }
             }
           }
         }
       }
     }
   }
 }
}
