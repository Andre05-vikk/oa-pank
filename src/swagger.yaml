openapi: 3.0.0
info:
  title: OA-Pank API
  version: 1.0.1
  description: API documentation for OA-Pank banking system with RFC 7231 compliant responses

servers:
  - url: /
    description: Current server

security: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: Error message
        error:
          type: string
          example: error_code
        details:
          type: string
          example: Detailed error information

    ProblemDetail:
      type: object
      description: Standard error format according to RFC 7807
      properties:
        type:
          type: string
          format: uri
          example: https://example.com/not-found
          description: A URI reference that identifies the problem type
        title:
          type: string
          example: Resource Not Found
          description: A short, human-readable summary of the problem type
        status:
          type: integer
          example: 404
          description: The HTTP status code
        detail:
          type: string
          example: No user found with the provided ID
          description: A human-readable explanation specific to this occurrence of the problem
        instance:
          type: string
          format: uri
          example: /users/123
          description: A URI reference that identifies the specific occurrence of the problem
        success:
          type: boolean
          example: false
          description: Indicates that the operation was not successful

    ValidationError:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: Validation failed
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                example: username
              message:
                type: string
                example: Username is required
              value:
                type: string
                example: ""

    AuthenticationError:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: User not found
        error:
          type: string
          example: user_not_found

    InsufficientFundsError:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: Insufficient funds
        error:
          type: string
          example: insufficient_funds
        available:
          type: number
          example: 100.50
        availableCurrency:
          type: string
          example: EUR
        required:
          type: number
          example: 200.00
        requiredCurrency:
          type: string
          example: EUR
        accountNumber:
          type: string
          example: OAP12345678
    User:
      type: object
      properties:
        _id:
          type: string
          example: "60d21b4667d0d8992e610c85"
        username:
          type: string
          example: johndoe
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        email:
          type: string
          example: john.doe@example.com
        role:
          type: string
          enum: [user, admin]
          example: user
        isActive:
          type: boolean
          example: true
        lastLogin:
          type: string
          format: date-time
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    UserInput:
      type: object
      required:
        - username
        - password
        - firstName
        - lastName
        - email
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 30
          example: johndoe
        password:
          type: string
          minLength: 6
          example: password123
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        email:
          type: string
          format: email
          example: john.doe@example.com
    LoginInput:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: johndoe
        password:
          type: string
          example: password123
    LoginResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        user:
          $ref: "#/components/schemas/User"
    Account:
      type: object
      properties:
        _id:
          type: string
          example: "60d21b4667d0d8992e610c85"
        accountNumber:
          type: string
          example: OAP12345678
        user:
          type: string
          example: 60d21b4667d0d8992e610c85
        balance:
          type: number
          format: float
          example: 1000.00
        currency:
          type: string
          enum: [EUR, USD, GBP, CHF, JPY, AUD, CAD, SEK, NOK, DKK, PLN, CZK]
          example: EUR
        isActive:
          type: boolean
          example: true
        type:
          type: string
          enum: [checking, savings, investment]
          example: checking
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    AccountInput:
      type: object
      required:
        - currency
        - type
      properties:
        currency:
          type: string
          enum: [EUR, USD, GBP, CHF, JPY, AUD, CAD, SEK, NOK, DKK, PLN, CZK]
          example: EUR
        type:
          type: string
          enum: [checking, savings, investment]
          example: checking
    Transaction:
      type: object
      properties:
        _id:
          type: string
          example: "60d21b4667d0d8992e610c85"
          description: Unique identifier for the transaction
        transactionId:
          type: string
          example: OAP-1620000000000-12345
          description: Human-readable transaction identifier
        accountFrom:
          type: string
          example: 31359474302
          description: Source account number
        accountTo:
          type: string
          example: 31300000000
          description: Destination account number
        amount:
          type: number
          format: float
          example: 100.00
          description: Transaction amount
        currency:
          type: string
          enum: [EUR, USD, GBP, CHF, JPY, AUD, CAD, SEK, NOK, DKK, PLN, CZK]
          example: EUR
          description: Transaction currency
        status:
          type: string
          enum: [pending, inProgress, completed, failed]
          example: completed
          description: |
            Current status of the transaction:
            - pending: Transaction is waiting to be processed
            - inProgress: Transaction is being processed
            - completed: Transaction has been successfully completed
            - failed: Transaction has failed
        type:
          type: string
          enum: [internal, external]
          example: internal
          description: |
            Type of transaction:
            - internal: Transaction between accounts in our bank
            - external: Transaction to an account in another bank
        description:
          type: string
          example: Payment for services
          description: Description or purpose of the transaction
        reference:
          type: string
          example: 4f7d6e5c-3b2a-1098-7f6e-5d4c3b2a1098
          description: Unique reference for the transaction (used for tracking)
        errorMessage:
          type: string
          nullable: true
          description: Error message if the transaction failed
        initiatedBy:
          type: string
          example: 60d21b4667d0d8992e610c85
          description: ID of the user who initiated the transaction
        signature:
          type: string
          nullable: true
          description: Digital signature for external transactions
        senderBank:
          type: string
          nullable: true
          description: Name or identifier of the sending bank
        receiverBank:
          type: string
          nullable: true
          description: Name or identifier of the receiving bank
        message:
          type: string
          example: "Transaction to Bank Name (31300000000) has been queued for processing"
          description: Additional information about the transaction status
        externalBankName:
          type: string
          example: "Reference Bank"
          description: Name of the external bank for external transactions
        createdAt:
          type: string
          format: date-time
          description: When the transaction was created
        updatedAt:
          type: string
          format: date-time
          description: When the transaction was last updated
    TransactionInput:
      type: object
      required:
        - accountFrom
        - accountTo
        - amount
        - currency
      properties:
        accountFrom:
          type: string
          example: 31359474302
          description: The source account number (must exist in our bank and belong to the authenticated user)
        accountTo:
          type: string
          example: 31300000000
          description: |
            The destination account number. Can be:
            1. An account in our bank (starts with our bank prefix and exists in our database)
            2. An account in another bank (starts with another bank's prefix)
            3. A test account (starts with our bank prefix but doesn't exist in our database)
        amount:
          type: number
          format: float
          minimum: 0.01
          example: 100.00
          description: The amount to transfer (must be greater than 0)
        currency:
          type: string
          enum: [EUR, USD, GBP, CHF, JPY, AUD, CAD, SEK, NOK, DKK, PLN, CZK]
          example: EUR
          description: The currency of the transaction
        description:
          type: string
          example: Payment for services
          description: Optional description for the transaction
    JWKSResponse:
      type: object
      properties:
        keys:
          type: array
          items:
            type: object
            properties:
              kty:
                type: string
                example: RSA
              use:
                type: string
                example: sig
              kid:
                type: string
                example: 1
              n:
                type: string
              e:
                type: string
                example: AQAB

paths:
  /users:
    post:
      security: []
      tags:
        - Authentication
      summary: Register a new user
      description: Creates a new user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInput"
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  user:
                    $ref: "#/components/schemas/User"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "409":
          description: Conflict - Username already exists
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                    format: uri
                    example: "https://example.com/conflict"
                  title:
                    type: string
                    example: "Resource Conflict"
                  status:
                    type: integer
                    example: 409
                  detail:
                    type: string
                    example: "A user with this username already exists in the system"
                  instance:
                    type: string
                    format: uri
                    example: "/users"
                  username:
                    type: string
                    example: "johndoe"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /sessions:
    post:
      security: []
      tags:
        - Authentication
      summary: Login user
      description: Authenticates a user and creates a session
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginInput"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "400":
          description: Bad request - Missing or invalid fields
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "401":
          description: Unauthorized - User not found or incorrect password
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                    format: uri
                    example: "https://example.com/authentication-error"
                  title:
                    type: string
                    example: "Authentication Failed"
                  status:
                    type: integer
                    example: 401
                  detail:
                    type: string
                    example: "The provided password is incorrect"
                  instance:
                    type: string
                    format: uri
                    example: "/sessions"
                  success:
                    type: boolean
                    example: false

  /sessions/current:
    delete:
      tags:
        - Authentication
      summary: Logout user
      description: Invalidates the user's current session
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Logged out successfully"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /sessions/current/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh session
      description: Extends the current session without requiring re-authentication
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Session refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiIxMjMiLCJpZCI6IjEyMyIsInVzZXJuYW1lIjoiam9obmRvZSIsImlhdCI6MTYxNjAwMDAwMCwiZXhwIjoxNjE2MDg2NDAwfQ.X_x-8wnfLq9_Pn6D9V8D6LMTRGQHJlGV1_1-QQ"
                  expiresAt:
                    type: string
                    format: date-time
                    example: 2025-03-17T20:26:40.000Z
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /.well-known/jwks.json:
    get:
      tags:
        - JWKS
      summary: Get JSON Web Key Set
      description: Returns the JSON Web Key Set used for verifying JWT tokens
      responses:
        "200":
          description: JWKS retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JWKSResponse"
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                    format: uri
                    example: "https://example.com/server-error"
                  title:
                    type: string
                    example: "Server Error"
                  status:
                    type: integer
                    example: 500
                  detail:
                    type: string
                    example: "Password hash not found in user data"
                  instance:
                    type: string
                    format: uri
                    example: "/users/123/password"
                  success:
                    type: boolean
                    example: false

  /users/me:
    get:
      tags:
        - Users
      summary: Get current user profile
      description: Returns the currently authenticated user's information
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  user:
                    $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Returns a specific user's information
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: User ID
      responses:
        "200":
          description: User information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  user:
                    $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden - No permission to access this user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not found - User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      tags:
        - Users
      summary: Update user
      description: Updates a user's information
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  example: John
                lastName:
                  type: string
                  example: Doe
                email:
                  type: string
                  format: email
                  example: john.doe@example.com
      responses:
        "200":
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  user:
                    $ref: "#/components/schemas/User"
        "400":
          description: Bad request - Missing or invalid fields
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden - No permission to update this user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not found - User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - Users
      summary: Delete user
      description: Deletes a user account
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: User ID
      responses:
        "204":
          description: User deleted successfully (No Content)
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden - No permission to delete this user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not found - User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/{id}/password:
    put:
      tags:
        - Users
      summary: Change password
      description: Changes a user's password
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - currentPassword
                - newPassword
              properties:
                currentPassword:
                  type: string
                  example: password123
                newPassword:
                  type: string
                  example: newpassword123
      responses:
        "200":
          description: Password changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Password changed successfully
        "400":
          description: Bad request - Missing or invalid fields
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden - No permission to change this user's password
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not found - User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                    format: uri
                    example: "https://example.com/server-error"
                  title:
                    type: string
                    example: "Server Error"
                  status:
                    type: integer
                    example: 500
                  detail:
                    type: string
                    example: "Password hash not found in user data"
                  instance:
                    type: string
                    format: uri
                    example: "/users/123/password"
                  success:
                    type: boolean
                    example: false

  /accounts:
    get:
      tags:
        - Accounts
      summary: Get all accounts
      description: Returns all accounts for the authenticated user
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Accounts retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  accounts:
                    type: array
                    items:
                      $ref: "#/components/schemas/Account"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags:
        - Accounts
      summary: Create account
      description: Creates a new account for the authenticated user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountInput"
      responses:
        "201":
          description: Account created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  account:
                    $ref: "#/components/schemas/Account"
        "400":
          description: Bad request - Missing or invalid fields
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /accounts/{id}:
    get:
      tags:
        - Accounts
      summary: Get account by ID
      description: Returns a specific account's information
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Account ID
      responses:
        "200":
          description: Account information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  account:
                    $ref: "#/components/schemas/Account"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden - No permission to access this account
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not found - Account not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - Accounts
      summary: Delete account
      description: Deletes an account
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Account ID
      responses:
        "200":
          description: Account deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Account deleted successfully"
        "409":
          description: Conflict - Account has non-zero balance
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                    format: uri
                    example: "https://example.com/conflict"
                  title:
                    type: string
                    example: "Resource Conflict"
                  status:
                    type: integer
                    example: 409
                  detail:
                    type: string
                    example: "The account has a non-zero balance which conflicts with the deletion request"
                  instance:
                    type: string
                    format: uri
                    example: "/accounts/123"
                  accountId:
                    type: string
                    example: "123"
                  balance:
                    type: number
                    example: 100.50
                  currency:
                    type: string
                    example: "EUR"
                  success:
                    type: boolean
                    example: false
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden - No permission to delete this account
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not found - Account not found
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                    format: uri
                    example: "https://example.com/not-found"
                  title:
                    type: string
                    example: "Resource Not Found"
                  status:
                    type: integer
                    example: 404
                  detail:
                    type: string
                    example: "No account found with the provided ID"
                  instance:
                    type: string
                    format: uri
                    example: "/accounts/123"
                  accountId:
                    type: string
                    example: "123"
                  success:
                    type: boolean
                    example: false

  /transactions:
    get:
      tags:
        - Transactions
      summary: Get all transactions
      description: Returns all transactions for the authenticated user
      security:
        - bearerAuth: []
      parameters:
        - name: accountId
          in: query
          required: false
          schema:
            type: string
          description: Filter by account ID
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum: [pending, inProgress, completed, failed]
          description: Filter by transaction status
        - name: type
          in: query
          required: false
          schema:
            type: string
            enum: [internal, external]
          description: Filter by transaction type
        - name: startDate
          in: query
          required: false
          schema:
            type: string
            format: date
          description: Filter by start date (YYYY-MM-DD)
        - name: endDate
          in: query
          required: false
          schema:
            type: string
            format: date
          description: Filter by end date (YYYY-MM-DD)
      responses:
        "200":
          description: Transactions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  transactions:
                    type: array
                    items:
                      $ref: "#/components/schemas/Transaction"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags:
        - Transactions
      summary: Create transaction
      description: |
        Creates a new transaction. The system handles three types of transactions:

        1. Internal transactions - When the destination account exists in our bank
        2. External transactions - When the destination account belongs to another bank
        3. Test transactions - When the destination account has our bank prefix but doesn't exist in our database

        For test transactions, the system will create a pending transaction without verifying the account's existence.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransactionInput"
      responses:
        "201":
          description: Transaction created successfully (for internal transactions)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  transaction:
                    $ref: "#/components/schemas/Transaction"
        "202":
          description: Transaction accepted and queued for processing (for external or test transactions)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  transaction:
                    allOf:
                      - $ref: "#/components/schemas/Transaction"
                      - type: object
                        properties:
                          message:
                            type: string
                            example: "Transaction to Bank Name (31300000000) has been queued for processing"
                          externalBankName:
                            type: string
                            example: "Reference Bank"
        "400":
          description: Bad request - Missing or invalid fields
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden - No permission to access the account
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not found - Account not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "422":
          description: Unprocessable Entity - Insufficient funds, unknown bank, or other business logic error
          content:
            application/problem+json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      type:
                        type: string
                        format: uri
                        example: "https://example.com/insufficient-funds"
                      title:
                        type: string
                        example: "Insufficient Funds"
                      status:
                        type: integer
                        example: 422
                      detail:
                        type: string
                        example: "Your current balance is 100.50 EUR, but the transaction requires 200.00 EUR"
                      instance:
                        type: string
                        format: uri
                        example: "/transactions"
                      available:
                        type: number
                        example: 100.50
                      availableCurrency:
                        type: string
                        example: "EUR"
                      required:
                        type: number
                        example: 200.00
                      requiredCurrency:
                        type: string
                        example: "EUR"
                      accountNumber:
                        type: string
                        example: "OAP12345678"
                      success:
                        type: boolean
                        example: false
                  - type: object
                    properties:
                      type:
                        type: string
                        format: uri
                        example: "https://example.com/unknown-bank"
                      title:
                        type: string
                        example: "Unknown Bank"
                      status:
                        type: integer
                        example: 422
                      detail:
                        type: string
                        example: "The bank with prefix 999 is not recognized"
                      instance:
                        type: string
                        format: uri
                        example: "/transactions"
                      bankPrefix:
                        type: string
                        example: "999"
                      accountNumber:
                        type: string
                        example: "99900000000"
                      success:
                        type: boolean
                        example: false
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
