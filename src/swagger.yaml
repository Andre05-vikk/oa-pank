openapi: 3.0.0
info:
  title: OA-Pank API
  version: 1.0.0
  description: API documentation for OA-Pank banking system

servers:
  - url: /
    description: Current server

security: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: Error message
        error:
          type: string
          example: error_code
        details:
          type: string
          example: Detailed error information

    ValidationError:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: Validation failed
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                example: username
              message:
                type: string
                example: Username is required
              value:
                type: string
                example: ""

    AuthenticationError:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: User not found
        error:
          type: string
          example: user_not_found

    InsufficientFundsError:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: Insufficient funds
        error:
          type: string
          example: insufficient_funds
        available:
          type: number
          example: 100.50
        availableCurrency:
          type: string
          example: EUR
        required:
          type: number
          example: 200.00
        requiredCurrency:
          type: string
          example: EUR
        accountNumber:
          type: string
          example: OAP12345678
    User:
      type: object
      properties:
        _id:
          type: string
          example: 60d21b4667d0d8992e610c85
        username:
          type: string
          example: johndoe
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        email:
          type: string
          example: john.doe@example.com
        role:
          type: string
          enum: [user, admin]
          example: user
        isActive:
          type: boolean
          example: true
        lastLogin:
          type: string
          format: date-time
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    UserInput:
      type: object
      required:
        - username
        - password
        - firstName
        - lastName
        - email
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 30
          example: johndoe
        password:
          type: string
          minLength: 6
          example: password123
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        email:
          type: string
          format: email
          example: john.doe@example.com
    LoginInput:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: johndoe
        password:
          type: string
          example: password123
    LoginResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        user:
          $ref: "#/components/schemas/User"
    Account:
      type: object
      properties:
        _id:
          type: string
          example: 60d21b4667d0d8992e610c85
        accountNumber:
          type: string
          example: OAP12345678
        user:
          type: string
          example: 60d21b4667d0d8992e610c85
        balance:
          type: number
          format: float
          example: 1000.00
        currency:
          type: string
          enum: [EUR, USD, GBP, CHF, JPY, AUD, CAD, SEK, NOK, DKK, PLN, CZK]
          example: EUR
        isActive:
          type: boolean
          example: true
        type:
          type: string
          enum: [checking, savings, investment]
          example: checking
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    AccountInput:
      type: object
      required:
        - currency
        - type
      properties:
        currency:
          type: string
          enum: [EUR, USD, GBP, CHF, JPY, AUD, CAD, SEK, NOK, DKK, PLN, CZK]
          example: EUR
        type:
          type: string
          enum: [checking, savings, investment]
          example: checking
    Transaction:
      type: object
      properties:
        _id:
          type: string
          example: 60d21b4667d0d8992e610c85
        transactionId:
          type: string
          example: OAP-1620000000000-12345
        accountFrom:
          type: string
          example: 31359474302
        accountTo:
          type: string
          example: 31300000000
        amount:
          type: number
          format: float
          example: 100.00
        currency:
          type: string
          enum: [EUR, USD, GBP, CHF, JPY, AUD, CAD, SEK, NOK, DKK, PLN, CZK]
          example: EUR
        status:
          type: string
          enum: [pending, inProgress, completed, failed]
          example: completed
        type:
          type: string
          enum: [internal, external]
          example: internal
        description:
          type: string
          example: Payment for services
        errorMessage:
          type: string
          nullable: true
        initiatedBy:
          type: string
          example: 60d21b4667d0d8992e610c85
        signature:
          type: string
          nullable: true
        senderBank:
          type: string
          nullable: true
        receiverBank:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    TransactionInput:
      type: object
      required:
        - accountFrom
        - accountTo
        - amount
        - currency
      properties:
        accountFrom:
          type: string
          example: 31359474302
        accountTo:
          type: string
          example: 31300000000
        amount:
          type: number
          format: float
          minimum: 0.01
          example: 100.00
        currency:
          type: string
          enum: [EUR, USD, GBP, CHF, JPY, AUD, CAD, SEK, NOK, DKK, PLN, CZK]
          example: EUR
        description:
          type: string
          example: Payment for services
    JWKSResponse:
      type: object
      properties:
        keys:
          type: array
          items:
            type: object
            properties:
              kty:
                type: string
                example: RSA
              use:
                type: string
                example: sig
              kid:
                type: string
                example: 1
              n:
                type: string
              e:
                type: string
                example: AQAB

paths:
  /sessions/register:
    post:
      security: []
      tags:
        - Authentication
      summary: Register a new user
      description: Creates a new user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInput"
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  user:
                    $ref: "#/components/schemas/User"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /sessions/login:
    post:
      security: []
      tags:
        - Authentication
      summary: Login user
      description: Authenticates a user and creates a session
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginInput"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "400":
          description: Bad request - Missing or invalid fields
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "401":
          description: Unauthorized - User not found or incorrect password
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationError"

  /sessions:
    delete:
      tags:
        - Authentication
      summary: Logout user
      description: Invalidates the user's session (RESTful implementation)
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Logged out successfully
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /sessions/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh session
      description: Extends the current session without requiring re-authentication
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Session refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Session refreshed successfully
                  expiresAt:
                    type: string
                    format: date-time
                    example: 2025-03-17T20:26:40.000Z
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /.well-known/jwks.json:
    get:
      tags:
        - JWKS
      summary: Get JSON Web Key Set
      description: Returns the JSON Web Key Set used for verifying JWT tokens
      responses:
        "200":
          description: JWKS retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JWKSResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/me:
    get:
      tags:
        - Users
      summary: Get current user profile
      description: Returns the currently authenticated user's information
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  user:
                    $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Returns a user by their ID (admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: User ID
      responses:
        "200":
          description: User information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  user:
                    $ref: "#/components/schemas/User"
              examples:
                getUserSuccess:
                  value:
                    success: true
                    user:
                      _id: "60d21b4667d0d8992e610c85"
                      username: "johndoe"
                      firstName: "John"
                      lastName: "Doe"
                      email: "john.doe@example.com"
                      role: "user"
                      isActive: true
                      createdAt: "2023-01-01T12:00:00Z"
                      updatedAt: "2023-01-02T12:00:00Z"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                unauthorized:
                  value:
                    success: false
                    message: "Authentication required"
                    error: "unauthorized"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                forbidden:
                  value:
                    success: false
                    message: "Access denied: Insufficient permissions"
                    error: "forbidden"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                notFound:
                  value:
                    success: false
                    message: "User not found"
                    error: "not_found"
    put:
      tags:
        - Users
      summary: Update user
      description: Updates a user's information (can only update own profile)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  example: John
                lastName:
                  type: string
                  example: Doe
                email:
                  type: string
                  format: email
                  example: john.doe@example.com
                password:
                  type: string
                  description: New password (optional)
                  example: newpassword123
            examples:
              updateUser:
                value:
                  firstName: "John"
                  lastName: "Smith"
                  email: "john.smith@example.com"
                  password: "newpassword123"
      responses:
        "200":
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User updated successfully
                  user:
                    $ref: "#/components/schemas/User"
              examples:
                updateSuccess:
                  value:
                    success: true
                    message: "User updated successfully"
                    user:
                      _id: "60d21b4667d0d8992e610c85"
                      username: "johndoe"
                      firstName: "John"
                      lastName: "Smith"
                      email: "john.smith@example.com"
                      role: "user"
                      isActive: true
                      createdAt: "2023-01-01T12:00:00Z"
                      updatedAt: "2023-01-03T12:00:00Z"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                badRequest:
                  value:
                    success: false
                    message: "Invalid input data"
                    error: "bad_request"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                unauthorized:
                  value:
                    success: false
                    message: "Authentication required"
                    error: "unauthorized"
        "403":
          description: Forbidden - can only update own profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                forbidden:
                  value:
                    success: false
                    message: "Access denied: You can only update your own profile"
                    error: "access_denied"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                notFound:
                  value:
                    success: false
                    message: "User not found"
                    error: "not_found"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - Users
      summary: Delete user
      description: Deletes a user account (can delete own account or admin can delete any account)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: User ID
      responses:
        "200":
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User deleted successfully
        "400":
          description: Bad request - Cannot delete user with non-zero balance accounts
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Cannot delete user with accounts that have non-zero balance
                  accounts:
                    type: array
                    items:
                      type: object
                      properties:
                        accountNumber:
                          type: string
                          example: OAP12345678
                        balance:
                          type: number
                          example: 1000.00
                        currency:
                          type: string
                          example: EUR
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                unauthorized:
                  value:
                    success: false
                    message: "Authentication required"
                    error: "unauthorized"
        "403":
          description: Forbidden - can only delete own account unless admin
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                forbidden:
                  value:
                    success: false
                    message: "Access denied: You can only delete your own account"
                    error: "forbidden"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                notFound:
                  value:
                    success: false
                    message: "User not found"
                    error: "not_found"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                serverError:
                  value:
                    success: false
                    message: "Internal server error"
                    error: "server_error"

  /accounts:
    get:
      tags:
        - Accounts
      summary: Get user accounts
      description: Returns all accounts belonging to the authenticated user
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Accounts retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  accounts:
                    type: array
                    items:
                      $ref: "#/components/schemas/Account"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags:
        - Accounts
      summary: Create new account
      description: Creates a new bank account for the authenticated user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountInput"
      responses:
        "201":
          description: Account created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  account:
                    $ref: "#/components/schemas/Account"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /accounts/{id}:
    get:
      tags:
        - Accounts
      summary: Get account by ID
      description: Returns a specific account by its ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Account ID
      responses:
        "200":
          description: Account retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  account:
                    $ref: "#/components/schemas/Account"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /accounts/{id}/balance:
    get:
      tags:
        - Accounts
      summary: Get account balance with transaction sectors
      description: Returns the account balance with a breakdown of transaction sectors
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Account ID
      responses:
        "200":
          description: Account balance retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  balance:
                    type: object
                    properties:
                      amount:
                        type: string
                        example: "1000.00"
                      currency:
                        type: string
                        example: "EUR"
                      sectors:
                        type: object
                        properties:
                          incoming:
                            type: object
                            properties:
                              total:
                                type: string
                                example: "1500.00"
                              count:
                                type: integer
                                example: 5
                              percentage:
                                type: integer
                                example: 45
                          outgoing:
                            type: object
                            properties:
                              total:
                                type: string
                                example: "500.00"
                              count:
                                type: integer
                                example: 6
                              percentage:
                                type: integer
                                example: 55
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Account not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /transactions:
    get:
      tags:
        - Transactions
      summary: Get user transactions
      description: Returns all transactions related to the authenticated user's accounts
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Transactions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  transactions:
                    type: array
                    items:
                      $ref: "#/components/schemas/Transaction"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags:
        - Transactions
      summary: Create new transaction
      description: Initiates a new transaction from one account to another
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransactionInput"
      responses:
        "201":
          description: Transaction initiated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  transaction:
                    $ref: "#/components/schemas/Transaction"
        "400":
          description: Bad request - Missing or invalid fields
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden - No permission to access the account
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not found - Account not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "422":
          description: Unprocessable Entity - Insufficient funds or other business logic error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InsufficientFundsError"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
