openapi: 3.0.0
info:
  title: OA-Pank API
  version: 1.0.0
  description: API documentation for OA-Pank banking system

servers:
  - url: https://hack2you.eu/oa-pank
    description: Production server
  - url: http://localhost:3001
    description: Development server (port 3001)
  - url: http://localhost:3000
    description: Development server (port 3000)

security: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: Error message
        error:
          type: string
          example: Detailed error message
    User:
      type: object
      properties:
        _id:
          type: string
          example: 60d21b4667d0d8992e610c85
        username:
          type: string
          example: johndoe
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        email:
          type: string
          example: john.doe@example.com
        role:
          type: string
          enum: [user, admin]
          example: user
        isActive:
          type: boolean
          example: true
        lastLogin:
          type: string
          format: date-time
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    UserInput:
      type: object
      required:
        - username
        - password
        - firstName
        - lastName
        - email
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 30
          example: johndoe
        password:
          type: string
          minLength: 6
          example: password123
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        email:
          type: string
          format: email
          example: john.doe@example.com
    LoginInput:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: johndoe
        password:
          type: string
          example: password123
    LoginResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        user:
          $ref: "#/components/schemas/User"
    Account:
      type: object
      properties:
        _id:
          type: string
          example: 60d21b4667d0d8992e610c85
        accountNumber:
          type: string
          example: OAP12345678
        user:
          type: string
          example: 60d21b4667d0d8992e610c85
        balance:
          type: number
          format: float
          example: 1000.00
        currency:
          type: string
          enum: [ EUR, USD, GBP, CHF, JPY, AUD, CAD, SEK, NOK, DKK, PLN, CZK ]
          example: EUR
        isActive:
          type: boolean
          example: true
        type:
          type: string
          enum: [checking, savings, investment]
          example: checking
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    AccountInput:
      type: object
      required:
        - currency
        - type
      properties:
        currency:
          type: string
          enum: [ EUR, USD, GBP, CHF, JPY, AUD, CAD, SEK, NOK, DKK, PLN, CZK ]
          example: EUR
        type:
          type: string
          enum: [checking, savings, investment]
          example: checking
    Transaction:
      type: object
      properties:
        _id:
          type: string
          example: 60d21b4667d0d8992e610c85
        transactionId:
          type: string
          example: OAP-1620000000000-12345
        fromAccount:
          type: string
          example: OAP12345678
        toAccount:
          type: string
          example: OAP87654321
        amount:
          type: number
          format: float
          example: 100.00
        currency:
          type: string
          enum: [ EUR, USD, GBP, CHF, JPY, AUD, CAD, SEK, NOK, DKK, PLN, CZK ]
          example: EUR
        status:
          type: string
          enum: [pending, inProgress, completed, failed]
          example: completed
        type:
          type: string
          enum: [internal, external]
          example: internal
        description:
          type: string
          example: Payment for services
        errorMessage:
          type: string
          nullable: true
        initiatedBy:
          type: string
          example: 60d21b4667d0d8992e610c85
        signature:
          type: string
          nullable: true
        senderBank:
          type: string
          nullable: true
        receiverBank:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    TransactionInput:
      type: object
      required:
        - fromAccount
        - toAccount
        - amount
        - currency
      properties:
        fromAccount:
          type: string
          example: OAP12345678
        toAccount:
          type: string
          example: OAP87654321
        amount:
          type: number
          format: float
          minimum: 0.01
          example: 100.00
        currency:
          type: string
          enum: [ EUR, USD, GBP, CHF, JPY, AUD, CAD, SEK, NOK, DKK, PLN, CZK ]
          example: EUR
        description:
          type: string
          example: Payment for services
    JWKSResponse:
      type: object
      properties:
        keys:
          type: array
          items:
            type: object
            properties:
              kty:
                type: string
                example: RSA
              use:
                type: string
                example: sig
              kid:
                type: string
                example: 1
              n:
                type: string
              e:
                type: string
                example: AQAB

  CurrencyRates:
    type: object
    properties:
      success:
        type: boolean
        example: true
      base:
        type: string
        example: EUR
      rates:
        type: object
        additionalProperties:
          type: integer
        example:
          EUR: 100
          USD: 109
          GBP: 86
          CHF: 105
          JPY: 15850
          AUD: 165
          CAD: 147
          SEK: 1127
          NOK: 1150
          DKK: 745
          PLN: 431
          CZK: 2530
      displayRates:
        type: object
        properties:
          EUR:
            type: number
            example: 1
          USD:
            type: string
            example: "1.09"
          GBP:
            type: string
            example: "0.86"
          CHF:
            type: string
            example: "1.05"
          JPY:
            type: string
            example: "158.50"
          AUD:
            type: string
            example: "1.65"
          CAD:
            type: string
            example: "1.47"
          SEK:
            type: string
            example: "11.27"
          NOK:
            type: string
            example: "11.47"
          DKK:
            type: string
            example: "7.45"
          PLN:
            type: string
            example: "4.31"
          CZK:
            type: string
            example: "25.30"

paths:
  /sessions/register:
    post:
      security: []
      tags:
        - Authentication
      summary: Register a new user
      description: Creates a new user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInput"
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  user:
                    $ref: "#/components/schemas/User"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
            schema:
                $ref: "#/components/schemas/Error"

  /sessions/login:
    post:
      security: []
      tags:
        - Authentication
      summary: Login user
      description: Authenticates a user and creates a session
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginInput"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /sessions:
    delete:
      tags:
        - Authentication
      summary: Logout user
      description: Invalidates the user's session (RESTful implementation)
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Logged out successfully
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /sessions/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh session
      description: Extends the current session without requiring re-authentication
      security:
        - bearerAuth: [ ]
      responses:
        "200":
          description: Session refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Session refreshed successfully
                  expiresAt:
                    type: string
                    format: date-time
                    example: 2025-03-17T20:26:40.000Z
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /.well-known/jwks.json:
    get:
      tags:
        - JWKS
      summary: Get JSON Web Key Set
      description: Returns the JSON Web Key Set used for verifying JWT tokens
      responses:
        "200":
          description: JWKS retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JWKSResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/me:
    get:
      tags:
        - Users
      summary: Get current user profile
      description: Returns the currently authenticated user's information
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  user:
                    $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Returns a user by their ID (admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: User ID
      responses:
        "200":
          description: User information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  user:
                    $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      tags:
        - Users
      summary: Update user
      description: Updates a user's information (can only update own profile)
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  example: John
                lastName:
                  type: string
                  example: Doe
                email:
                  type: string
                  format: email
                  example: john.doe@example.com
                password:
                  type: string
                  description: New password (optional)
                  example: newpassword123
      responses:
        "200":
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User updated successfully
                  user:
                    $ref: "#/components/schemas/User"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden - can only update own profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - Users
      summary: Delete user
      description: Deletes a user account (can delete own account or admin can delete any account)
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: User ID
      responses:
        "200":
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User deleted successfully
        "400":
          description: Bad request - Cannot delete user with non-zero balance accounts
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Cannot delete user with accounts that have non-zero balance
                  accounts:
                    type: array
                    items:
                      type: object
                      properties:
                        accountNumber:
                          type: string
                          example: OAP12345678
                        balance:
                          type: number
                          example: 1000.00
                        currency:
                          type: string
                          example: EUR
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden - can only delete own account unless admin
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /accounts:
    get:
      tags:
        - Accounts
      summary: Get user accounts
      description: Returns all accounts belonging to the authenticated user
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Accounts retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  accounts:
                    type: array
                    items:
                      $ref: "#/components/schemas/Account"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags:
        - Accounts
      summary: Create new account
      description: Creates a new bank account for the authenticated user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountInput"
      responses:
        "201":
          description: Account created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  account:
                    $ref: "#/components/schemas/Account"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /accounts/{id}:
    get:
      tags:
        - Accounts
      summary: Get account by ID
      description: Returns a specific account by its ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Account ID
      responses:
        "200":
          description: Account retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  account:
                    $ref: "#/components/schemas/Account"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /accounts/{id}/balance:
    get:
      tags:
        - Accounts
      summary: Get account balance with transaction sectors
      description: Returns the account balance with a breakdown of transaction sectors
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Account ID
      responses:
        "200":
          description: Account balance retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  balance:
                    type: object
                    properties:
                      amount:
                        type: string
                        example: "1000.00"
                      currency:
                        type: string
                        example: "EUR"
                      sectors:
                        type: object
                        properties:
                          incoming:
                            type: object
                            properties:
                              total:
                                type: string
                                example: "1500.00"
                              count:
                                type: integer
                                example: 5
                              percentage:
                                type: integer
                                example: 45
                          outgoing:
                            type: object
                            properties:
                              total:
                                type: string
                                example: "500.00"
                              count:
                                type: integer
                                example: 6
                              percentage:
                                type: integer
                                example: 55
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Account not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /currencies:
    get:
      tags:
        - Currency
      summary: Get all currency rates
      description: Returns the current exchange rates for all supported currencies
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CurrencyRates"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /admin/currencies:
    put:
      tags:
        - Admin
      summary: Update all currency rates from external source
      description: Admin only endpoint to update all currency rates from an external API
      security:
        - bearerAuth: [ ]
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      success:
                        type: boolean
                        example: true
                      message:
                        type: string
                        example: Currency rates updated successfully
                  - $ref: "#/components/schemas/CurrencyRates"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /currencies/{code}:
    parameters:
      - name: code
        in: path
        description: Currency code (e.g., EUR, USD)
        required: true
        schema:
          type: string
          enum: [ EUR, USD, GBP, CHF, JPY, AUD, CAD, SEK, NOK, DKK, PLN, CZK ]
    get:
      tags:
        - Currency
      summary: Get specific currency rate
      description: Returns the exchange rate for a specific currency
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  code:
                    type: string
                    example: USD
                  rate:
                    type: integer
                    example: 109
                  displayRate:
                    type: string
                    example: "1.09"
        "404":
          description: Currency not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /transactions:
    get:
      tags:
        - Transactions
      summary: Get user transactions
      description: Returns all transactions related to the authenticated user's accounts
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Transactions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  transactions:
                    type: array
                    items:
                      $ref: "#/components/schemas/Transaction"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags:
        - Transactions
      summary: Create new transaction
      description: Initiates a new transaction from one account to another
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransactionInput"
      responses:
        "201":
          description: Transaction initiated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  transaction:
                    $ref: "#/components/schemas/Transaction"
        "400":

  /admin/accounts/{id}:
    delete:
      tags:
        - Admin
      summary: Delete account (admin only)
      description: Allows bank administrators to delete any account regardless of balance
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Account ID to delete
      responses:
        "200":
          description: Account deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Account deleted successfully
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Account not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
